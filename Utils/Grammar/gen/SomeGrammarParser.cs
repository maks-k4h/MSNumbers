//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/makskonevych/Documents/C#/test/ConsoleApp1/ConsoleApp1/SomeGrammar.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SomeGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, WS=14, INT=15;
	public const int
		RULE_line = 0, RULE_sum = 1, RULE_addend = 2, RULE_multiplier = 3, RULE_atomic = 4, 
		RULE_float = 5;
	public static readonly string[] ruleNames = {
		"line", "sum", "addend", "multiplier", "atomic", "float"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'", "'inc'", "'dec'", 
		"'max'", "','", "'min'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "WS", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SomeGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SomeGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SomeGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SomeGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SomeGrammarParser.Eof, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISomeGrammarVisitor<TResult> typedVisitor = visitor as ISomeGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			sum();
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddendContext addend() {
			return GetRuleContext<AddendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISomeGrammarVisitor<TResult> typedVisitor = visitor as ISomeGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 2, RULE_sum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			addend();
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 16;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 17;
				sum();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplierContext multiplier() {
			return GetRuleContext<MultiplierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddendContext addend() {
			return GetRuleContext<AddendContext>(0);
		}
		public AddendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addend; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.EnterAddend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.ExitAddend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISomeGrammarVisitor<TResult> typedVisitor = visitor as ISomeGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddendContext addend() {
		AddendContext _localctx = new AddendContext(Context, State);
		EnterRule(_localctx, 4, RULE_addend);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			multiplier();
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2 || _la==T__3) {
				{
				State = 21;
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 22;
				addend();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		public MultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISomeGrammarVisitor<TResult> typedVisitor = visitor as ISomeGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplierContext multiplier() {
		MultiplierContext _localctx = new MultiplierContext(Context, State);
		EnterRule(_localctx, 6, RULE_multiplier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			atomic();
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 26;
				Match(T__4);
				State = 27;
				atomic();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext[] sum() {
			return GetRuleContexts<SumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum(int i) {
			return GetRuleContext<SumContext>(i);
		}
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISomeGrammarVisitor<TResult> typedVisitor = visitor as ISomeGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(Context, State);
		EnterRule(_localctx, 8, RULE_atomic);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				@float();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				Match(T__5);
				State = 32;
				sum();
				State = 33;
				Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35;
				Match(T__7);
				State = 36;
				Match(T__5);
				State = 37;
				sum();
				State = 38;
				Match(T__6);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 40;
				Match(T__8);
				State = 41;
				Match(T__5);
				State = 42;
				sum();
				State = 43;
				Match(T__6);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 5);
				{
				State = 45;
				Match(T__9);
				State = 46;
				Match(T__5);
				State = 47;
				sum();
				State = 48;
				Match(T__10);
				State = 49;
				sum();
				State = 50;
				Match(T__6);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 52;
				Match(T__11);
				State = 53;
				Match(T__5);
				State = 54;
				sum();
				State = 55;
				Match(T__10);
				State = 56;
				sum();
				State = 57;
				Match(T__6);
				}
				break;
			case Eof:
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__6:
			case T__10:
				EnterOuterAlt(_localctx, 7);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SomeGrammarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SomeGrammarParser.INT, i);
		}
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISomeGrammarListener typedListener = listener as ISomeGrammarListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISomeGrammarVisitor<TResult> typedVisitor = visitor as ISomeGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 10, RULE_float);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				Match(INT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				Match(T__12);
				State = 64;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65;
				Match(INT);
				State = 66;
				Match(T__12);
				State = 67;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,71,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		1,1,1,1,1,1,3,1,19,8,1,1,2,1,2,1,2,3,2,24,8,2,1,3,1,3,1,3,3,3,29,8,3,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,61,8,4,1,5,1,5,1,5,
		1,5,1,5,1,5,3,5,69,8,5,1,5,0,0,6,0,2,4,6,8,10,0,2,1,0,1,2,1,0,3,4,75,0,
		12,1,0,0,0,2,15,1,0,0,0,4,20,1,0,0,0,6,25,1,0,0,0,8,60,1,0,0,0,10,68,1,
		0,0,0,12,13,3,2,1,0,13,14,5,0,0,1,14,1,1,0,0,0,15,18,3,4,2,0,16,17,7,0,
		0,0,17,19,3,2,1,0,18,16,1,0,0,0,18,19,1,0,0,0,19,3,1,0,0,0,20,23,3,6,3,
		0,21,22,7,1,0,0,22,24,3,4,2,0,23,21,1,0,0,0,23,24,1,0,0,0,24,5,1,0,0,0,
		25,28,3,8,4,0,26,27,5,5,0,0,27,29,3,8,4,0,28,26,1,0,0,0,28,29,1,0,0,0,
		29,7,1,0,0,0,30,61,3,10,5,0,31,32,5,6,0,0,32,33,3,2,1,0,33,34,5,7,0,0,
		34,61,1,0,0,0,35,36,5,8,0,0,36,37,5,6,0,0,37,38,3,2,1,0,38,39,5,7,0,0,
		39,61,1,0,0,0,40,41,5,9,0,0,41,42,5,6,0,0,42,43,3,2,1,0,43,44,5,7,0,0,
		44,61,1,0,0,0,45,46,5,10,0,0,46,47,5,6,0,0,47,48,3,2,1,0,48,49,5,11,0,
		0,49,50,3,2,1,0,50,51,5,7,0,0,51,61,1,0,0,0,52,53,5,12,0,0,53,54,5,6,0,
		0,54,55,3,2,1,0,55,56,5,11,0,0,56,57,3,2,1,0,57,58,5,7,0,0,58,61,1,0,0,
		0,59,61,1,0,0,0,60,30,1,0,0,0,60,31,1,0,0,0,60,35,1,0,0,0,60,40,1,0,0,
		0,60,45,1,0,0,0,60,52,1,0,0,0,60,59,1,0,0,0,61,9,1,0,0,0,62,69,5,15,0,
		0,63,64,5,13,0,0,64,69,5,15,0,0,65,66,5,15,0,0,66,67,5,13,0,0,67,69,5,
		15,0,0,68,62,1,0,0,0,68,63,1,0,0,0,68,65,1,0,0,0,69,11,1,0,0,0,5,18,23,
		28,60,68
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
